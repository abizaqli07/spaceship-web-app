// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid()) @db.Char(30)
  email     String     @unique
  password  String
  username  String?
  role      ROLE       @default(USER)
  passenger passenger?
  pilots    pilots?
}

model passenger {
  id_passenger String   @id @default(cuid())
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @unique @db.Char(30)
  fullname     String
  datebirth    String
  gender       GENDER
  no_tlp       String
  created_at   DateTime @default(now())
  ticket       ticket[]
}

model pilots {
  id_pilot    String     @id @default(cuid())
  user        User?      @relation(fields: [userId], references: [id])
  name        String
  image       String?
  datebirth   String
  gender      GENDER
  no_tlp      String
  legal       String?
  is_verified Boolean    @default(false)
  schedule    schedule[]
  userId      String?    @unique @db.Char(30)
}

model spaceship {
  id_spaceship String     @id @default(cuid())
  name         String
  image        String?
  description  String
  model        String
  created_at   DateTime   @default(now())
  schedule     schedule[]
}

model planet {
  id_planet    String     @id @default(cuid())
  name         String
  image        String?
  description  String
  distance     Int
  is_explored  Boolean?   @default(false)
  is_populated Boolean?   @default(false)
  created_at   DateTime   @default(now())
  schedule     schedule[]
}

model schedule {
  id_schedule String    @id @default(cuid())
  price       Decimal   @db.Money
  capacity    Int
  destination planet    @relation(fields: [planetId], references: [id_planet])
  planetId    String
  pilot       pilots    @relation(fields: [pilotsId], references: [id_pilot])
  pilotsId    String
  spaceship   spaceship @relation(fields: [spaceshipId], references: [id_spaceship])
  spaceshipId String
  time_depart DateTime
  time_land   DateTime
  ticket      ticket[]
}

model ticket {
  id_ticket         String             @id @default(cuid())
  schedule          schedule           @relation(fields: [scheduleId], references: [id_schedule])
  scheduleId        String
  passenger         passenger          @relation(fields: [passengerId], references: [id_passenger])
  passengerId       String
  ticket_has_status ticket_has_status?
}

model ticket_has_status {
  id_ticket_has_status String @id @default(cuid())
  ticket               ticket @relation(fields: [ticketId], references: [id_ticket], onDelete: Cascade)
  ticketId             String @unique
  status               STATUS
}

enum STATUS {
  ACTIVE
  WAITING
  CANCELLED
}

enum ROLE {
  USER
  PILOT
  ADMIN
}

enum GENDER {
  MALE
  FEMALE
}
